// <auto-generated />
using System;
using DataAccess.LicensePlateContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(LicensePlateDbContext))]
    [Migration("20240315190820_Migrations")]
    partial class Migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c290a0f3-b8c1-49c8-8bc2-0a473ec9bf98",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Admin",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 2, 8, 20, 268, DateTimeKind.Local).AddTicks(978),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ICPDPHN",
                            Password = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAELTlLPonrkGKhL2bAf0RWr/tmaxWrKFkT9jFt4PHzIPLVBWIrLlqUQaDYHqCfFUioA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "651e47b5-8450-4e2f-a613-e363ab4ca03a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("34fb159a-6b96-4149-a3b4-5d1b5cc374a3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "353f48aa-2108-4d85-9adb-cd0fe32eda2f",
                            Email = "ductv@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Tran Van Duc",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 2, 8, 20, 269, DateTimeKind.Local).AddTicks(4598),
                            LockoutEnabled = false,
                            NormalizedEmail = "DUCTV@GMAIL.COM",
                            NormalizedUserName = "DUCTV",
                            Password = "ductv",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpO7+fTrIquoPKd0tkm0CuRlSdqlEcHUx35IsFvjp1gZwue5NV+9N4Ymhasxklnyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afcdfeae-a3c5-44ef-894a-afacc33fc7a7",
                            TwoFactorEnabled = false,
                            UserName = "ductv"
                        },
                        new
                        {
                            Id = new Guid("34dd158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56b63bf8-2954-40de-8836-8224dfd62afc",
                            Email = "thanhdc@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Dinh Cong Thanh",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 2, 8, 20, 270, DateTimeKind.Local).AddTicks(8384),
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHDC@GMAIL.COM",
                            NormalizedUserName = "THANHDC",
                            Password = "thanhdc",
                            PasswordHash = "AQAAAAEAACcQAAAAENHntgeTqr4GeXwSDuS0iR001dtxd2m0KOx3IE0mvVFcbISLg9CzmqE/5Jxq8Vo5UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19e2dec1-294d-4a65-ad6a-340cea9c630a",
                            TwoFactorEnabled = false,
                            UserName = "thanhdc"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("District", (string)null);

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            Name = "Hà Nội",
                            Prefix = "1"
                        },
                        new
                        {
                            DistrictId = 2,
                            Name = "Hải Phòng",
                            Prefix = "2"
                        },
                        new
                        {
                            DistrictId = 3,
                            Name = "Hải Dương",
                            Prefix = "3"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.LicensePlate", b =>
                {
                    b.Property<int>("LicensePlateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicensePlateId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("LicensePlateId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("LicensePlate", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Seri", b =>
                {
                    b.Property<int>("SeriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("SeriId");

                    b.ToTable("Seri", (string)null);

                    b.HasData(
                        new
                        {
                            SeriId = 1,
                            Title = "A"
                        },
                        new
                        {
                            SeriId = 2,
                            Title = "B"
                        },
                        new
                        {
                            SeriId = 3,
                            Title = "C"
                        },
                        new
                        {
                            SeriId = 4,
                            Title = "D"
                        },
                        new
                        {
                            SeriId = 5,
                            Title = "E"
                        },
                        new
                        {
                            SeriId = 6,
                            Title = "F"
                        },
                        new
                        {
                            SeriId = 7,
                            Title = "G"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            ConcurrencyStamp = "6cfb8e70-063d-4557-8eb3-ac55d33032cc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86"),
                            ConcurrencyStamp = "e81a178c-fa47-4380-a953-db8fdd7243fb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("34fb159a-6b96-4149-a3b4-5d1b5cc374a3"),
                            RoleId = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86")
                        },
                        new
                        {
                            UserId = new Guid("34dd158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            RoleId = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.LicensePlate", b =>
                {
                    b.HasOne("DataAccess.Models.District", "District")
                        .WithMany("LicensePlates")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("LicensePlates")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Seri", "Series")
                        .WithMany("LicensePlates")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("District");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Navigation("LicensePlates");
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.Navigation("LicensePlates");
                });

            modelBuilder.Entity("DataAccess.Models.Seri", b =>
                {
                    b.Navigation("LicensePlates");
                });
#pragma warning restore 612, 618
        }
    }
}
