// <auto-generated />
using System;
using DataAccess.LicensePlateContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(LicensePlateDbContext))]
    [Migration("20240316054856_Migrations")]
    partial class Migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2284ca88-3d89-4c2e-a387-df1cf4a91629",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Admin",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 12, 48, 55, 997, DateTimeKind.Local).AddTicks(1423),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ICPDPHN",
                            Password = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGuPvqA1sl30Ji91oTy+7aAaquU9y7lpfzVi4wzs0AB+2TCZ3mN1DHcWZaz2JIccDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5ba40b7-a850-44ed-9e50-521500d8c60a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("34dd158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa79770d-8ce6-4d82-a813-ea5f1c68db7e",
                            Email = "thanhdao@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Thành Đào",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 12, 48, 55, 998, DateTimeKind.Local).AddTicks(5290),
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHDAO@GMAIL.COM",
                            NormalizedUserName = "THANHDAO",
                            Password = "thanhdao",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGmCmDZLxa2KiJqO7FcYbsG3a1g6APItF4QlIxOWrN+lEtR3u56KYca635D6AWV1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f62d5d3f-500c-439d-9b0e-dfcab1de7a72",
                            TwoFactorEnabled = false,
                            UserName = "thanhdao"
                        },
                        new
                        {
                            Id = new Guid("48da158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51adb867-a7e3-4343-8677-844b619c2be5",
                            Email = "thuylinh@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Thùy Linh",
                            IsAccountActive = true,
                            JoinedDate = new DateTime(2024, 3, 16, 12, 48, 55, 999, DateTimeKind.Local).AddTicks(8542),
                            LockoutEnabled = false,
                            NormalizedEmail = "THUYLINH@GMAIL.COM",
                            NormalizedUserName = "THUYLINH",
                            Password = "thuylinh",
                            PasswordHash = "AQAAAAEAACcQAAAAEKLxd/hsb3szFdcuPitu/H6KGbr5bTmy6vkD4FF5TaoLLbo8kUC/sEE3CI8TaP8mbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e117b6b-a332-45b9-853e-e8406ec495f4",
                            TwoFactorEnabled = false,
                            UserName = "thuylinh"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.ToTable("District", (string)null);

                    b.HasData(
                        new
                        {
                            DistrictId = 1,
                            Name = "Cao Bằng",
                            Prefix = "11"
                        },
                        new
                        {
                            DistrictId = 2,
                            Name = "Lạng Sơn",
                            Prefix = "12"
                        },
                        new
                        {
                            DistrictId = 3,
                            Name = "Quảng Ninh",
                            Prefix = "14"
                        },
                        new
                        {
                            DistrictId = 4,
                            Name = "Hải Phòng",
                            Prefix = "15"
                        },
                        new
                        {
                            DistrictId = 5,
                            Name = "Thái Bình",
                            Prefix = "17"
                        },
                        new
                        {
                            DistrictId = 6,
                            Name = "Nam Định",
                            Prefix = "18"
                        },
                        new
                        {
                            DistrictId = 7,
                            Name = "Phú Thọ",
                            Prefix = "19"
                        },
                        new
                        {
                            DistrictId = 8,
                            Name = "Thái Nguyên",
                            Prefix = "20"
                        },
                        new
                        {
                            DistrictId = 9,
                            Name = "Yên Bái",
                            Prefix = "21"
                        },
                        new
                        {
                            DistrictId = 10,
                            Name = "Tuyên Quang",
                            Prefix = "22"
                        },
                        new
                        {
                            DistrictId = 11,
                            Name = "Hà Giang",
                            Prefix = "23"
                        },
                        new
                        {
                            DistrictId = 12,
                            Name = "Lào Cai",
                            Prefix = "24"
                        },
                        new
                        {
                            DistrictId = 13,
                            Name = "Lai Châu",
                            Prefix = "25"
                        },
                        new
                        {
                            DistrictId = 14,
                            Name = "Sơn La",
                            Prefix = "26"
                        },
                        new
                        {
                            DistrictId = 15,
                            Name = "Điện Biên",
                            Prefix = "27"
                        },
                        new
                        {
                            DistrictId = 16,
                            Name = "Hòa Bình",
                            Prefix = "28"
                        },
                        new
                        {
                            DistrictId = 17,
                            Name = "Hà Nội",
                            Prefix = "29"
                        },
                        new
                        {
                            DistrictId = 18,
                            Name = "Hải Dương",
                            Prefix = "34"
                        },
                        new
                        {
                            DistrictId = 19,
                            Name = "Ninh Bình",
                            Prefix = "35"
                        },
                        new
                        {
                            DistrictId = 20,
                            Name = "Thanh Hóa",
                            Prefix = "36"
                        },
                        new
                        {
                            DistrictId = 21,
                            Name = "Nghệ An",
                            Prefix = "37"
                        },
                        new
                        {
                            DistrictId = 22,
                            Name = "Hà Tĩnh",
                            Prefix = "38"
                        },
                        new
                        {
                            DistrictId = 23,
                            Name = "TP. Đà Nẵng",
                            Prefix = "43"
                        },
                        new
                        {
                            DistrictId = 24,
                            Name = "Đắk Lắk",
                            Prefix = "47"
                        },
                        new
                        {
                            DistrictId = 25,
                            Name = "Đắk Nông",
                            Prefix = "48"
                        },
                        new
                        {
                            DistrictId = 26,
                            Name = "Lâm Đồng",
                            Prefix = "49"
                        },
                        new
                        {
                            DistrictId = 27,
                            Name = "Tp. Hồ Chí Minh",
                            Prefix = "41"
                        },
                        new
                        {
                            DistrictId = 28,
                            Name = "Đồng Nai",
                            Prefix = "39, 60"
                        },
                        new
                        {
                            DistrictId = 29,
                            Name = "Bình Dương",
                            Prefix = "61"
                        },
                        new
                        {
                            DistrictId = 30,
                            Name = "Long An",
                            Prefix = "62"
                        },
                        new
                        {
                            DistrictId = 31,
                            Name = "Tiền Giang",
                            Prefix = "63"
                        },
                        new
                        {
                            DistrictId = 32,
                            Name = "Vĩnh Long",
                            Prefix = "64"
                        },
                        new
                        {
                            DistrictId = 33,
                            Name = "Cần Thơ",
                            Prefix = "65"
                        },
                        new
                        {
                            DistrictId = 34,
                            Name = "Đồng Tháp",
                            Prefix = "66"
                        },
                        new
                        {
                            DistrictId = 35,
                            Name = "An Giang",
                            Prefix = "67"
                        },
                        new
                        {
                            DistrictId = 36,
                            Name = "Kiên Giang",
                            Prefix = "68"
                        },
                        new
                        {
                            DistrictId = 37,
                            Name = "Cà Mau",
                            Prefix = "69"
                        },
                        new
                        {
                            DistrictId = 38,
                            Name = "Tây Ninh",
                            Prefix = "70"
                        },
                        new
                        {
                            DistrictId = 39,
                            Name = "Bến Tre",
                            Prefix = "71"
                        },
                        new
                        {
                            DistrictId = 40,
                            Name = "Bà Rịa - Vũng Tàu",
                            Prefix = "72"
                        },
                        new
                        {
                            DistrictId = 41,
                            Name = "Quảng Bình",
                            Prefix = "73"
                        },
                        new
                        {
                            DistrictId = 42,
                            Name = "Quảng Trị",
                            Prefix = "74"
                        },
                        new
                        {
                            DistrictId = 43,
                            Name = "Thừa Thiên Huế",
                            Prefix = "75"
                        },
                        new
                        {
                            DistrictId = 44,
                            Name = "Quảng Ngãi",
                            Prefix = "76"
                        },
                        new
                        {
                            DistrictId = 45,
                            Name = "Bình Định",
                            Prefix = "77"
                        },
                        new
                        {
                            DistrictId = 46,
                            Name = "Phú Yên",
                            Prefix = "78"
                        },
                        new
                        {
                            DistrictId = 47,
                            Name = "Khánh Hòa",
                            Prefix = "79"
                        },
                        new
                        {
                            DistrictId = 48,
                            Name = "Gia Lai",
                            Prefix = "81"
                        },
                        new
                        {
                            DistrictId = 49,
                            Name = "Kon Tum",
                            Prefix = "82"
                        },
                        new
                        {
                            DistrictId = 50,
                            Name = "Sóc Trăng",
                            Prefix = "83"
                        },
                        new
                        {
                            DistrictId = 51,
                            Name = "Trà Vinh",
                            Prefix = "84"
                        },
                        new
                        {
                            DistrictId = 52,
                            Name = "Ninh Thuận",
                            Prefix = "85"
                        },
                        new
                        {
                            DistrictId = 53,
                            Name = "Bình Thuận",
                            Prefix = "86"
                        },
                        new
                        {
                            DistrictId = 54,
                            Name = "Vĩnh Phúc",
                            Prefix = "88"
                        },
                        new
                        {
                            DistrictId = 55,
                            Name = "Hưng Yên",
                            Prefix = "89"
                        },
                        new
                        {
                            DistrictId = 56,
                            Name = "Hà Nam",
                            Prefix = "90"
                        },
                        new
                        {
                            DistrictId = 57,
                            Name = "Quảng Nam",
                            Prefix = "92"
                        },
                        new
                        {
                            DistrictId = 58,
                            Name = "Bình Phước",
                            Prefix = "93"
                        },
                        new
                        {
                            DistrictId = 59,
                            Name = "Bạc Liêu",
                            Prefix = "94"
                        },
                        new
                        {
                            DistrictId = 60,
                            Name = "Hậu Giang",
                            Prefix = "95"
                        },
                        new
                        {
                            DistrictId = 61,
                            Name = "Bắc Cạn",
                            Prefix = "97"
                        },
                        new
                        {
                            DistrictId = 62,
                            Name = "Bắc Giang",
                            Prefix = "98"
                        },
                        new
                        {
                            DistrictId = 63,
                            Name = "Bắc Ninh",
                            Prefix = "99"
                        },
                        new
                        {
                            DistrictId = 64,
                            Name = "Hải Phòng",
                            Prefix = "16"
                        },
                        new
                        {
                            DistrictId = 65,
                            Name = "Hà Nội",
                            Prefix = "33"
                        },
                        new
                        {
                            DistrictId = 66,
                            Name = "Hà Nội",
                            Prefix = "40"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.LicensePlate", b =>
                {
                    b.Property<int>("LicensePlateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicensePlateId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("LicensePlateId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("LicensePlate", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Seri", b =>
                {
                    b.Property<int>("SeriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("SeriId");

                    b.ToTable("Seri", (string)null);

                    b.HasData(
                        new
                        {
                            SeriId = 1,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "A"
                        },
                        new
                        {
                            SeriId = 2,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "B"
                        },
                        new
                        {
                            SeriId = 3,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "C"
                        },
                        new
                        {
                            SeriId = 4,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "D"
                        },
                        new
                        {
                            SeriId = 5,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "E"
                        },
                        new
                        {
                            SeriId = 6,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "F"
                        },
                        new
                        {
                            SeriId = 7,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "G"
                        },
                        new
                        {
                            SeriId = 8,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "H"
                        },
                        new
                        {
                            SeriId = 9,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "I"
                        },
                        new
                        {
                            SeriId = 10,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "J"
                        },
                        new
                        {
                            SeriId = 11,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "K"
                        },
                        new
                        {
                            SeriId = 12,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "L"
                        },
                        new
                        {
                            SeriId = 13,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "M"
                        },
                        new
                        {
                            SeriId = 14,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "N"
                        },
                        new
                        {
                            SeriId = 15,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "O"
                        },
                        new
                        {
                            SeriId = 16,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "P"
                        },
                        new
                        {
                            SeriId = 17,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "Q"
                        },
                        new
                        {
                            SeriId = 18,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "R"
                        },
                        new
                        {
                            SeriId = 19,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "S"
                        },
                        new
                        {
                            SeriId = 20,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "T"
                        },
                        new
                        {
                            SeriId = 21,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "U"
                        },
                        new
                        {
                            SeriId = 22,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "V"
                        },
                        new
                        {
                            SeriId = 23,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "W"
                        },
                        new
                        {
                            SeriId = 24,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "X"
                        },
                        new
                        {
                            SeriId = 25,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "Y"
                        },
                        new
                        {
                            SeriId = 26,
                            Description = "Cấp cho xe của doanh nghiệp, Ban quản lý dự án thuộc doanh nghiệp, các tổ chức xã hội, xã hội – nghề nghiệp, xe của đơn vị sự nghiệp ngoài công lập, xe của Trung tâm đào tạo sát hạch lái xe công lập, xe của cá nhân",
                            Title = "Z"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca"),
                            ConcurrencyStamp = "0cf92d6a-955b-4ec0-9946-a9f0f4a1df0d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86"),
                            ConcurrencyStamp = "883c353c-6647-412e-b6c8-107ecac68581",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b8c777a9-55b9-4b3d-860a-d7b56e4c24b7"),
                            RoleId = new Guid("b8fd818f-63f1-49ee-bec5-f7b66cafbfca")
                        },
                        new
                        {
                            UserId = new Guid("34dd158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            RoleId = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86")
                        },
                        new
                        {
                            UserId = new Guid("48da158a-6b96-4149-a3b4-5d1b5cc374a3"),
                            RoleId = new Guid("d2d63c5b-d09b-4828-8322-f18ba103fe86")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.LicensePlate", b =>
                {
                    b.HasOne("DataAccess.Models.District", "District")
                        .WithMany("LicensePlates")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Account", "Account")
                        .WithMany("LicensePlates")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Seri", "Series")
                        .WithMany("LicensePlates")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("District");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DataAccess.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Account", b =>
                {
                    b.Navigation("LicensePlates");
                });

            modelBuilder.Entity("DataAccess.Models.District", b =>
                {
                    b.Navigation("LicensePlates");
                });

            modelBuilder.Entity("DataAccess.Models.Seri", b =>
                {
                    b.Navigation("LicensePlates");
                });
#pragma warning restore 612, 618
        }
    }
}
